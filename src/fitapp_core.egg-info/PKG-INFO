Metadata-Version: 2.4
Name: fitapp-core
Version: 0.1.0
Summary: Core logic for Fitapp workout plan generator
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: streamlit>=1.26
Requires-Dist: pydantic>=2.6
Requires-Dist: fpdf2>=2.7
Requires-Dist: openai>=1.0.0
Requires-Dist: python-dotenv>=1.0.0
Provides-Extra: rag
Requires-Dist: faiss-cpu>=1.7; extra == "rag"
Requires-Dist: sentence-transformers>=2.2; extra == "rag"
Requires-Dist: langchain>=0.2; extra == "rag"
Provides-Extra: dev
Requires-Dist: pytest>=8.4.0; extra == "dev"
Dynamic: license-file

---
title: Fitapp
emoji: ðŸš€
colorFrom: red
colorTo: red
sdk: docker
app_port: 8501
python_version: "3.10"
tags:
- streamlit
pinned: false
short_description: Workout planner
---

# Fitapp

Fitapp is an interactive Streamlit app for planning and exporting workout routines, deployed on Hugging Face Spaces via the Docker SDK with reproducible builds.

## Features
- Streamlit multipage UI (Onboarding â†’ Plan â†’ Export) with form-based inputs and cached plan generation
- Dockerized runtime for consistent local runs and Space deploys (sdk: docker, app_port: 8501)
- Pyproject-first packaging with src/ layout; dev extras keep runtime lean

## Tech stack
- Python 3.10
- Streamlit
- Hugging Face Spaces (SDK: Docker, app_port 8501)
- Pydantic for typed schemas
- fpdf2 for generating a print-friendly PDF export

## Project structure
```
.
â”œâ”€â”€ apps/web/app.py      # Streamlit entry point
â”œâ”€â”€ apps/web/pages/      # 1_Onboarding, 2_Plan, 3_Export, 4_Weekly_Review
â”œâ”€â”€ src/fitapp_core/     # Core logic (src layout)
â”œâ”€â”€ Dockerfile           # Container entry for Spaces
â”œâ”€â”€ pyproject.toml       # Dependencies & metadata (PEP 621)
â””â”€â”€ README.md
```
## Local development
Create and activate a virtual environment:
python -m venv .venv && source .venv/bin/activate   # on Linux/Mac
.venv\Scripts\activate                             # on Windows

Install in editable mode:
pip install -e .

Run Streamlit locally:
streamlit run apps/web/app.

## Tests and CI:
Run tests locally:
pytest -q tests/unit (fast unit tests)
pytest -q (full suite)

CI setup:
Use actions/setup-python with pip cache
Install with pip install -e ".[dev]"
Run pytest on push or pull requests

## Deployment (Hugging Face Spaces)
- This Space uses the Docker SDK. The YAML block at the top of README selects `sdk: docker` and `app_port: 8501`.
- The Dockerfile installs the project (`pip install -e .`) and starts the app with:
  streamlit run apps/web/app.py --server.port=8501 --server.address=0.0.0.0
- Pushes to `main` trigger an automatic build and redeploy.
- Use the Spaceâ€™s Build and Container logs for diagnostics.

## Configuration
- No API keys or secrets are required at this time.
- If added later, store them as Space Secrets/Variables and access with os.getenv.
- The optional `python_version` field in the YAML ensures Python 3.10 is used.

## Contributing
- Fork the repo, create a feature branch, and run:
  pip install -e .
- Develop with Streamlit locally, then open a PR.
- Optionally, add a GitHub Actions workflow to smoke-test installation and imports.

## License
- This project is currently not licensed for reuse
- You can add a LICENSE file later if you want others to use or contribute

## Contributing
- Fork the repo and create a feature branch
- Install dev extras for tests:
    pip install -e ".[dev]"
- Run pytest locally before opening a PR
- Streamlit CLI options (such as port or address) can help if local ports are busy
---

### Notes
- Hugging Face Spaces requires the YAML block at the very top of README.md for metadata.
- For Docker SDK apps, `app_port` tells Spaces which internal container port to expose.
- The actual app startup is defined by the Dockerfile CMD.
- Do not add `app_file` for Docker SDK; the Dockerfile governs the process.


